/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Assignment1;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.HashMap;
import java.time.format.DateTimeFormatter;  
import java.time.LocalDateTime; 

class ATMTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");
    }

    @Test
    public void BasicTransactionTest() {
        
        ATM atm = new ATM("src/resources/cards.csv");
        // check the transaction number
        assertEquals(atm.getTransactionNumber(),0);
        // cehck setter method for transaction number
        atm.setTransactionNumber(3);
        assertEquals(atm.getTransactionNumber(),3);
    }
    @Test
    public void BasicAdminTest() {
        
        ATM atm = new ATM("src/resources/cards.csv");
        // check the transaction number
        assertEquals(atm.isAdmin(), false);
        // checkk setter method for transaction number
        atm.setAdmin(true);
        assertEquals(atm.isAdmin(),true);

    }
    @Test
    public void setValidCardsTest() {
        
        ATM atm = new ATM("src/resources/test.csv");
        atm.setValidCards();
        assertNotNull(atm.getValidCards());
        assertEquals(atm.getValidCards().get(0).getName(), "Glady the Bady");
        assertEquals(atm.getValidCards().get(1).getName(), "Scomo def shat himself");
        assertEquals(atm.getValidCards().get(0).getCardNumber(), "12345");
        assertEquals(atm.getValidCards().get(1).getCardNumber(), "00000");

        
    }
   @Test
    public void updateCardCsvTest() {
        
        ATM atm = new ATM("src/resources/test.csv");
        //atm.setValidCards();
        //atm.getValidCards().get(0).funds = 500;
        atm.updateCardCsv();
        
        assertEquals(atm.getValidCards().get(0).getFunds(), 500.0);
        
    }
    @Test
    public void getCardTest() {
        
        ATM atm = new ATM("src/resources/test.csv");
        atm.setValidCards();
        Card card = atm.getCard("00000",9999);
        assertNotNull(card);
        assertEquals(card.getName(), "Scomo def shat himself");
        assertEquals(card.getCardNumber(), "00000");
        assertEquals(card.getPin(), 9999);

        // invalid card 
        Card cardInvalid = atm.getCard("90900",9999);
        assertNull(cardInvalid);



        
    }
    @Test
    public void cardValidationTest() {
        
        ATM atm = new ATM("src/resources/test.csv");
        atm.setValidCards();


        // invalid card - wrong pin
        
        Object value = atm.cardValidation("12345",9934)[0];
        Object description = atm.cardValidation("12345",9934)[1];
        boolean di = ((Boolean) value).booleanValue();
        String response = String.valueOf(description);
        assertFalse(di);
        assertEquals(response, "Invalid Card Number/pin");

        // invalid card - wrong cardnumber
        
        value = atm.cardValidation("00001",9999)[0];
        description = atm.cardValidation("00001",9999)[1];
        di = ((Boolean) value).booleanValue();
        response = String.valueOf(description);
        assertFalse(di);
        assertEquals(response, "Invalid Card Number/pin");

        // valid card number - scomo
        value = atm.cardValidation("00000",9999)[0];
        description = atm.cardValidation("00000",9999)[1];
        di = ((Boolean) value).booleanValue();
        response = String.valueOf(description);
        assertTrue(di);
        assertEquals(response, "Confirmed details.");

        // invalid startdate - Bobby
        value = atm.cardValidation("11111",1235)[0];
        description = atm.cardValidation("11111",1235)[1];
        di = ((Boolean) value).booleanValue();
        response = String.valueOf(description);
        assertFalse(di);
        assertEquals(response, "Your card cannot be used before start date.");

        // expired  - rick roll  
        value = atm.cardValidation("22222",1111)[0];
        description = atm.cardValidation("22222",1111)[1];
        di = ((Boolean) value).booleanValue();
        response = String.valueOf(description);
        assertFalse(di);
        assertEquals(response, "Your card has been expired.");

        // stolen status - Git Git
        Card stolen = atm.getCard("33333",1111);
        
        value = atm.cardValidation("33333",1111)[0];
        description = atm.cardValidation("33333",1111)[1];
        
        di = ((Boolean) value).booleanValue();
        response = String.valueOf(description);
        
        assertEquals("The card being used has been stolen. It will now be confiscated. Our Apologies for any inconvenience.",response);
        
        //lost 
        Card lost = atm.getCard("45454",1111);
        
        value = atm.cardValidation("45454",1111)[0];
        description = atm.cardValidation("45454",1111)[1];
        
        di = ((Boolean) value).booleanValue();
        response = String.valueOf(description);
        assertFalse(di);
        assertEquals(response,"The card being used has been reported lost. It will now be confiscated. Our Apologies for any inconvenience.");
        
    }
    @Test
    public void CardTransactionMethods() {
        
        ATM atm = new ATM("src/resources/test.csv");
        atm.setValidCards();
        Card card = atm.getCard("33334",1111);
        String balance = atm.cardTransactionMethod(card, "BALANCE CHECK");
        assertEquals("5000.0", balance);
        // cant test this because requires real time
        String b = atm.cardTransactionMethod(card, "BALANCE RECEIPT");
        //assertEquals("500.0", b);
        
        String wrong = atm.cardTransactionMethod(card, "wrong");
        assertEquals("wrong transaction type", wrong);

        
    }
    @Test
    public void CardTransactionMethodsDeposit() {
        
        ATM atm = new ATM("src/resources/test.csv");
        atm.setValidCards();
        Card card = atm.getCard("33334",1111);
        double a[] = {10,35,20};
        String balance = atm.cardTransactionMethod(card, "DEPOSIT", a);
        DateTimeFormatter dtObj = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm");  
        LocalDateTime dtnow = LocalDateTime.now();  

        String receipt = "\n##################################################\n" +
                         "################## NAAAR ATM \u00a9 ###################\n" +
                         "##################################################\n\n"+
                         "Date: " + dtObj.format(dtnow) + "\n" + 
                         "Name: " +  card.getName() + "\n" +
                         "Card Number: " +  "XX"+  card.getCardNumber().substring(card.getCardNumber().length() - 3) + "\n" + // % 100000
                        "Transaction Number: " + String.valueOf(atm.transactionNumber) + "\n" +
                        "Transaction Type: " + "DEPOSIT" + "\n\n" +
                        "----------------------------------------------------\n" +
                        "Account Balance:                " + String.valueOf(card.getFunds() + "\n" +
                        "Transaction Amount:                " + Double.toString(30) + "\n" +
                        "\n##################################################\n" );
        
        assertEquals("\nSuccessfully Deposited!\n"+ receipt, balance);
        
        String wrong = atm.cardTransactionMethod(card, "wrong", a);
        assertEquals("wrong transaction type", wrong);

        
    }
    @Test
    public void CardTransactionMethodsWithdraw() {
        
        ATM atm = new ATM("src/resources/test.csv");
        atm.setValidCards();
        Card card = atm.getCard("33334",1111);
        String balance = atm.cardTransactionMethod(card,"WITHDRAWAL", 10 );
        DateTimeFormatter dtObj = DateTimeFormatter.ofPattern("yyyy/MM/dd HH:mm");  
        LocalDateTime dtnow = LocalDateTime.now();  

        String receipt = "\n##################################################\n" +
                         "################## NAAAR ATM \u00a9 ###################\n" +
                         "##################################################\n\n"+
                         "Date: " + dtObj.format(dtnow) + "\n" + 
                         "Name: " +  card.getName() + "\n" +
                         "Card Number: " +  "XX"+  card.getCardNumber().substring(card.getCardNumber().length() - 3) + "\n" + // % 100000
                        "Transaction Number: " + String.valueOf(atm.transactionNumber) + "\n" +
                        "Transaction Type: " + "WITHDRAWAL" + "\n\n" +
                        "----------------------------------------------------\n" +
                        "Account Balance:                " + String.valueOf(card.getFunds() + "\n" +
                        "Transaction Amount:                " + Double.toString(10) + "\n" +
                        "\n##################################################\n" );
        assertEquals("\nSuccessfully Withdrew!\n" + receipt , balance);
        
        String wrong = atm.cardTransactionMethod(card, "wrong",50);
        assertEquals("wrong transaction type", wrong);

        
    }

    @Test
    public void setFundsTest() {
        ATM atm = new ATM("src/resources/test.csv");
        double[] denominations = new double[] { 100, 50, 20, 10, 5, 2, 1, 0.5, 0.2, 0.1, 0.05 };
        HashMap<Double, Integer> denomMap = new HashMap<Double, Integer>();
        for (double denom : denominations) {
            denomMap.put(denom, 500);
        }
        HashMap<Double, Integer> admin = new HashMap<Double, Integer>();
        admin.put(100.00, 20);
        admin.put(10.00, 50);
        admin.put(0.5, 100);
        assertEquals(atm.setFunds(admin), false);
        atm.admin = true;
        assertEquals(atm.setFunds(admin), true);
        denomMap.put(100.00, 520);
        denomMap.put(10.00, 550);
        denomMap.put(0.5, 600);
        assertEquals(atm.denominationsMap, denomMap);
    }


} // test jenks


